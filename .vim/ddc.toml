[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim', 'vim-precious']
on_event = ['InsertEnter', 'CursorHold', 'CmdlineEnter']
hook_source = '''
call ddc#custom#patch_global('sources', [
\  'vim-lsp',
\  'around',
\  'ultisnips',
\])

call ddc#custom#patch_global('cmdlineSources',
\  ['cmdline', 'cmdline-history', 'around'])

call ddc#custom#patch_global('sourceOptions', {
\  'vim-lsp': {
\    'mark': '| LSP',
\    'forceCompletionPattern': '(\.|:|->|"\w+/*).?',
\  },
\  'ultisnips': {'mark': '| US'},
\  'around': {'mark': '| A'},
\  '_': {
\    'ignoreCase': v:true,
\    'matchers': ['matcher_fuzzy'],
\    'sorters': ['sorter_fuzzy'],
\    'converters': ['converter_fuzzy', 'converter_truncate'],
\  },
\  'cmdline': {
\    'ignoreCase': v:false,
\    'mark': '| cmd',
\    'forceCompletionPattern': '\S/\S*',
\  },
\  'cmdline-history': {
\    'mark': '| history',
\    'converters': ['converter_fuzzy'],
\  },
\})

call ddc#custom#patch_global('filterParams', {
\  'converter_fuzzy': {
\    'hlGroup': 'CursorLine'
\  },
\  'converter_truncate': {
\    'maxAbbrWidth': 50,
\  },
\})

" Use pum.vim
call ddc#custom#patch_global('completionMenu', 'pum.vim')

inoremap <silent><expr> <TAB>
\ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#manual_complete()
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>

" Use cmdline ddc
call ddc#custom#patch_global('autoCompleteEvents', [
\  'InsertEnter', 'TextChangedI', 'TextChangedP',
\  'CmdlineEnter', 'CmdlineChanged',
\])

" Use ddc.
call ddc#enable()
'''
hook_add = '''
nnoremap : <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  " Note: It disables default command line completion!
  set wildchar=<C-t>
  set wildcharm=<C-t>

  cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ ddc#manual_complete()
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>

  " Overwrite sources
  if !exists('s:cmdline_prev_buffer_config')
    let s:cmdline_prev_buffer_config = ddc#custom#get_buffer()
  endif

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()
  autocmd InsertEnter <buffer> ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
endfunction
function! CommandlinePost() abort
  silent! cunmap <Tab>
  silent! cunmap <S-Tab>

  " Restore sources
  if exists('s:cmdline_prev_buffer_config')
    call ddc#custom#set_buffer(s:cmdline_prev_buffer_config)
    unlet s:cmdline_prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif

  set wildchar=<Tab>
  set wildcharm=<Tab>
endfunction
'''

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
call pum#set_option({
\  'max_width': 80,
\})
'''

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_event = ['BufEnter']
hook_add = '''
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_inlay_hints_enabled = 1

function! s:on_lsp_buffer_enabled() abort
  setlocal signcolumn=yes
  nmap <buffer> <Plug>(leader)rn <plug>(lsp-rename)
  nmap <buffer> <Plug>(leader)ca <plug>(lsp-code-action)
  nmap <buffer> K <plug>(lsp-hover)
endfunction

augroup lsp_install
  au!
  " call s:on_lsp_buffer_enabled only for languages that has the server registered.
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = 'vim-lsp'
on_source = 'vim-lsp'

[[plugins]]
repo = 'shun/ddc-vim-lsp'
depends = ['ddc.vim', 'vim-lsp']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'SirVer/ultisnips'
on_source = 'ddc.vim'
hook_add = '''
let g:UltiSnipsEditSplit = 'horizontal'
let g:UltiSnipsExpandTrigger = '<C-l>'
let g:UltiSnipsJumpForwardTrigger = '<C-l>'
let g:UltiSnipsJumpBackwardTrigger = '<C-p>'
'''

[[plugins]]
repo = 'matsui54/ddc-ultisnips'
on_source = 'ddc.vim'
depends = ['ddc.vim', 'ultisnips']

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

# Install your filters
[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# converters
[[plugins]]
repo = 'matsui54/ddc-converter_truncate'
on_source = 'ddc.vim'
