[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
hook_source = '''
call ddc#custom#patch_global('sources', [
	\ 'around',
	\ 'file',
	\ 'neosnippet',
	\ 'vim-lsp',
	\ ])

call ddc#custom#patch_global('sourceOptions', {
	\ 'file': {
		\ 'mark': 'file',
		\ 'isVolatile': v:true,
		\ 'forceCompletionPattern': '[^\s()*;"\u0027]/[^\s()*;"\u0027]*',
	\ },
	\ 'vim-lsp': {
		\ 'mark': 'LSP',
		\ 'forceCompletionPattern': '\.|:|->|"\w+/*'
	\ },
	\ 'neosnippet': {'mark': 'snippet'},
	\ 'around': {'mark': 'A'},
	\ '_': {
		\ 'matchers': ['matcher_fuzzy'],
		\ 'sorters': ['sorter_fuzzy'],
		\ 'converters': ['converter_fuzzy'],
	\ },
	\ 'skkeleton': {
		\ 'mark': 'SKK',
		\ 'matchers': ['skkeleton'],
		\ 'sorters': [],
		\ 'minAutoCompleteLength': 2,
	\ },
	\ })

call ddc#custom#patch_global('filterParams', {
	\ 'converter_fuzzy': {
		\ 'hlGroup': 'CursorLine'
		\ }
	\ })

" Use pum.vim
call ddc#custom#patch_global('completionMenu', 'pum.vim')

inoremap <silent><expr> <TAB>
	\ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
	\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
	\ '<TAB>' : ddc#manual_complete()
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

" Use ddc.
call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_ft = ['cpp', 'tex']
hook_add = 'let g:lsp_diagnostics_enabled = 0'

[[plugins]]
repo = 'mattn/vim-lsp-settings'
depends = 'vim-lsp'
on_source = 'vim-lsp'

[[plugins]]
repo = 'shun/ddc-vim-lsp'
depends = ['ddc.vim', 'vim-lsp']
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_source = 'ddc.vim'
hook_add = '''
let g:neosnippet#snippets_directory = '~/.vim/my_snippets'
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-l> <Plug>(neosnippet_expand_or_jump)
smap <C-l> <Plug>(neosnippet_expand_or_jump)
xmap <C-l> <Plug>(neosnippet_expand_target)
'''
hook_source = '''
" SuperTab like snippets behavior.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <expr><TAB>
	\ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
	\ neosnippet#expandable_or_jumpable() ?
	\    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
	\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = {ic = '<Plug>(skkeleton-toggle)'}
depends = 'ddc.vim'
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
call skkeleton#config({
	\'eggLikeNewline':v:true,
	\'globalJisyo': '~/Library/Application Support/AquaSKK/SKK-JISYO.L',
	\'userJisyo': '~/Library/Application Support/AquaSKK/skk-jisyo.utf8',
	\})

call skkeleton#register_kanatable('rom', {
	\ ',': ['，', ''],
	\ '.': ['．', ''],
	\ })

autocmd User skkeleton-enable-pre call s:skkeleton_pre()
function! s:skkeleton_pre() abort
	" Overwrite sources
	let s:prev_buffer_config = ddc#custom#get_buffer()
	call ddc#custom#patch_buffer('sources', ['skkeleton'])
endfunction
autocmd User skkeleton-disable-pre call s:skkeleton_post()
function! s:skkeleton_post() abort
	" Restore sources
	call ddc#custom#set_buffer(s:prev_buffer_config)
endfunction
'''

# Install your filters
[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'
