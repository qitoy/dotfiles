[[plugins]]
repo = 'lervag/vimtex'
on_ft=['tex']
hook_add='''
let g:vimtex_view_method = 'skim'
let g:vimtex_view_general_viewer='/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '@line @pdf @tex'
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft='help'
hook_add = 'set helplang=ja'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
hook_add = '''
let g:quickrun_config = {
\ '_': {
\   'runner': has('nvim') ? 'neovim_job' : 'job',
\ },
\ 'test': {
\ 'exec': ['echo "%s, %s:p:r"'],
\ 'tempfile': '%{tempname()}.txt',
\ },
\ 'procon/download': {
\   'exec': [
\     'cd %{expand("%:p:h")}',
\     'rm -rf test/',
\     'oj d %a',
\     'sh -c "echo %a > .contest_url"',
\   ],
\   'outputter': 'null',
\ },
\ 'procon/browse': {
\   'exec': ['open \$(cat %{expand("%:p:h")}/.contest_url)'],
\   'outputter': 'null',
\ },
\ 'procon/test': {
\   'exec': [
\     'cd %{expand("%:p:h")}',
\     'g++ -std=gnu++17 -Wall -Wextra -DLOCAL -O2 %s -o %s:p:r',
\     'oj test -N -c %s:p:r --tle 4'
\   ],
\   'tempfile': '%{tempname()}.cpp',
\   'hook/sweep/files': ['%S:p:r'],
\   'outputter/buffer/bufname': 'procon://test',
\   'outputter/buffer/filetype': 'procontest',
\ },
\ 'procon/submit': {
\   'exec': [
\     'cd %{expand("%:p:h")}',
\     'sh -c "oj-bundle -I ~/Library/cpp-library %s > %s:p:r"',
\     'oj submit -y --wait=0 -l 4003 %s:p:r',
\   ],
\   'tempfile': '%{expand("%:p:h")}/submit.cpp',
\   'hook/sweep/files': ['%S', '%S:p:r'],
\   'outputter': 'null',
\ },
\ 'procon/hack': {
\   'exec': [
\     'cd %{expand("%:p:h")}',
\     'g++ -std=gnu++17 -Wall -Wextra -DLOCAL -O2 main.cpp -o program',
\     'g++ -std=gnu++17 -Wall -Wextra -DLOCAL -O2 tle.cpp -o tle',
\     'timeout 10 oj g/i -c ./tle --hack ./program ./generate.py',
\   ],
\ },
\}
'''

[[plugins]]
repo = 'lambdalisue/vim-quickrun-neovim-job'
on_source = 'vim-quickrun'
if = 'has("nvim")'

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
on_cmd = 'FuzzyMotion'
hook_add = '''
nnoremap <Plug>(leader)<space> <cmd>FuzzyMotion<cr>
'''

[[plugins]]
repo = 'skanehira/denops-translate.vim'
on_cmd = 'Translate'

[[plugins]]
repo = 'skanehira/denops-silicon.vim'
on_cmd = 'Silicon'
hook_add = '''
let g:silicon_options = { 'font': 'Source Code Pro for Powerline', }
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
let g:context_filetype#filetypes = {
\   'help': [
\     {
\       'start': '>$',
\       'end': '^\S',
\       'filetype': 'vim.help',
\     },
\   ],
\   'pandoc': [
\     {
\       'start': '^\s*\\begin{\(\h\w*\*\?\)}',
\       'end': '^\s*\\end{\1}',
\       'filetype': 'tex',
\     },
\   ],
\ }
'''

[[plugins]]
repo = 'lambdalisue/gin.vim'
depends = 'denops.vim'
on_cmd = ['Gin', 'GinBranch', 'GinChaperon', 'GinDiff', 'GinEdit', 'GinPatch', 'GinStatus']

[[plugins]]
repo = 'skanehira/denops-gh.vim'
depends = 'denops.vim'
on_path = ['https://github.com/*', 'gh://*']

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter']
rev = 'feature/feedkeys'
hook_source = '''
call lexima#add_rule({
\ 'char': '<CR>',
\ 'input': '<CR>',
\ 'input_after': '<CR>endsnippet',
\ 'at': 'snippet\>.*\%#$',
\ 'filetype': 'snippets',
\})

let s:lexima_cpp_rules = [
\ ]

for rule in s:lexima_cpp_rules
  let rule.filetype = 'cpp'
  call lexima#add_rule(rule)
endfor

let s:lexima_tex_rules = [
\ {'char': '[', 'at': '\\\%#', 'input': '[<CR>', 'input_after': '<CR>\]'},
\
\ {'char': '{', 'at': '\\\%#', 'input_after': '\}'},
\ {'char': '<BS>', 'at': '\\{\%#\\}', 'input': '<BS><BS>', 'delete': 2},
\
\ {'char': '(', 'at': '\\left\%#', 'input_after': '\right)'},
\ {'char': ')', 'at': '\%#\\right)', 'leave': 7},
\ {'char': '[', 'at': '\\left\%#', 'input_after': '\right]'},
\ {'char': ']', 'at': '\%#\\right]', 'leave': 7},
\ {'char': '{', 'at': '\\left\\\%#', 'input_after': '\right\}'},
\ {'char': '}', 'at': '\\\%#\\right\\}', 'input': '<BS>\right\}', 'delete': 8},
\
\ {'char': '$', 'input_after': '$'},
\ {'char': '$', 'at': '\\\%#'},
\ {'char': '$', 'at': '\%#\$', 'leave': 1},
\ {'char': '<BS>', 'at': '\$\%#\$', 'delete': 1},
\ {'char': '<CR>', 'at': '\$\%#\$', 'input_after': '<CR>'},
\]

for rule in s:lexima_tex_rules
  let rule.filetype = 'tex'
  call lexima#add_rule(rule)
endfor
'''

### pandoc
[[plugins]]
repo = 'vim-pandoc/vim-pandoc'
on_ft = ['markdown']
on_cmd = 'Pandoc'
hook_add = '''
let g:pandoc#filetypes#handled = ["pandoc", "markdown"]
let g:pandoc#filetypes#pandoc_markdown = 0
let g:pandoc#spell#enabled = 0
let g:pandoc#command#autoexec_on_writes = 0
'''

[[plugins]]
repo = 'vim-pandoc/vim-pandoc-syntax'
on_source = ['vim-pandoc']

### jupyter
[[plugins]]
repo = 'goerz/jupytext.vim'
on_path = '.*\.ipynb'
hook_add = '''
let g:jupytext_fmt = 'py:percent'
let g:jupytext_filetype_map = {'py': 'python'}
'''

[[plugins]]
repo = 'jpalardy/vim-slime'
on_source = 'jupytext.vim'
hook_add = '''
let g:slime_target = 'vimterminal'
let g:slime_vimterminal_cmd = 'ipython3'
let g:slime_vimterminal_config = {'term_finish': 'close'}

let g:slime_python_ipython = 1
let g:slime_cell_delimiter = "# %%"
let g:slime_dont_ask_default = 1
'''

[[plugins]]
repo = 'hanschen/vim-ipython-cell'
on_source = 'jupytext.vim'
