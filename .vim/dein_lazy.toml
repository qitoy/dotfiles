[[plugins]]
repo = 'lervag/vimtex'
on_ft=['tex']
hook_add='''
let g:vimtex_view_method = 'skim'
let g:vimtex_view_general_viewer='/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '@line @pdf @tex'
'''

[[plugins]]
repo = 'previm/previm'
on_ft = ['markdown']
on_cmd = 'PrevimOpen'
hook_add = '''
let g:previm_enable_realtime = 1
let g:previm_extra_libraries = [
\  {
\    'name': 'katex',
\    'files': [
\      {
\        'type': 'css',
\        'path': '_/js/extra/texmath.min.css',
\        'url': 'https://cdn.jsdelivr.net/npm/markdown-it-texmath/css/texmath.min.css',
\      },
\      {
\        'type': 'css',
\        'path': '_/css/extra/katex.min.css',
\        'url': 'https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css',
\        'code': [
\          'renderMathInElement(document.body)',
\        ],
\      },
\      {
\        'type': 'js',
\        'path': '_/js/extra/katex-auto-render.min.js',
\        'url': 'https://cdn.jsdelivr.net/npm/katex@latest/dist/contrib/auto-render.min.js',
\        'code': [
\          'renderMathInElement(document.body)',
\        ],
\      },
\      {
\        'type': 'js',
\        'path': '_/js/extra/katex.min.js',
\        'url': 'https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.js',
\        'code': [
\          'document.querySelectorAll(''pre code.language-katex'').forEach(elem => {',
\          '  const html = katex.renderToString(elem.innerText, {',
\          '    displayMode: true,',
\          '    output: ''html'',',
\          '    throwOnError: false,',
\          '  })',
\          '  const span = document.createElement(''span'')',
\          '  span.innerHTML = html',
\          '  elem.parentNode.replaceWith(span)',
\          '})',
\          'document.querySelectorAll(''.inlkatex'').forEach(elem => {',
\          '  const html = katex.renderToString(elem.innerText, {',
\          '    output: ''html'',',
\          '    throwOnError: false,',
\          '  })',
\          '  const span = document.createElement(''span'')',
\          '  span.innerHTML = html',
\          '  elem.replaceWith(span)',
\          '})',
\        ],
\      },
\    ],
\  },
\]
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft='help'
hook_add = 'set helplang=ja'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
hook_add = '''
" let g:quickrun_config = {}
'''

[[plugins]]
repo = 'skanehira/denops-translate.vim'
on_cmd = 'Translate'
# hook_add = 'let g:translate_popup_window = 0'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
let g:context_filetype#filetypes = {
\ 'help': [
\   {
\     'start': '>$',
\     'end': '^\S',
\     'filetype': 'vim.help',
\   },
\ ],
\}
'''

[[plugins]]
repo = 'lambdalisue/gin.vim'
depends = 'denops.vim'
on_cmd = ['Gin', 'GinBranch', 'GinChaperon', 'GinDiff', 'GinEdit', 'GinPatch', 'GinStatus']

[[plugins]]
repo = 'skanehira/denops-gh.vim'
depends = 'denops.vim'
on_path = ['https://github.com/*', 'gh://*']

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'

[[plugins]]
repo = 'gamoutatsumi/dps-ghosttext.vim'
on_cmd = 'GhostStart'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter']
hook_source = '''
call lexima#add_rule({
\ 'char': '<CR>',
\ 'input': '<CR>',
\ 'input_after': '<CR>endsnippet',
\ 'at': 'snippet\>.*\%#$',
\ 'filetype': 'snippets',
\})

let s:lexima_cpp_rules = [
\ ]

for rule in s:lexima_cpp_rules
  let rule.filetype = 'cpp'
  call lexima#add_rule(rule)
endfor

let s:lexima_tex_rules = [
\ {'char': '[', 'at': '\\\%#', 'input': '[<CR>', 'input_after': '<CR>\]'},
\
\ {'char': '{', 'at': '\\\%#', 'input_after': '\}'},
\ {'char': '<BS>', 'at': '\\{\%#\\}', 'input': '<BS><BS>', 'delete': 2},
\
\ {'char': '(', 'at': '\\left\%#', 'input_after': '\right)'},
\ {'char': ')', 'at': '\%#\\right)', 'leave': 7},
\ {'char': '[', 'at': '\\left\%#', 'input_after': '\right]'},
\ {'char': ']', 'at': '\%#\\right]', 'leave': 7},
\ {'char': '{', 'at': '\\left\\\%#', 'input_after': '\right\}'},
\ {'char': '}', 'at': '\\\%#\\right\\}', 'input': '<BS>\right\}', 'delete': 8},
\
\ {'char': '$', 'input_after': '$'},
\ {'char': '$', 'at': '\\\%#'},
\ {'char': '$', 'at': '\%#\$', 'leave': 1},
\ {'char': '<BS>', 'at': '\$\%#\$', 'delete': 1},
\ {'char': '<CR>', 'at': '\$\%#\$', 'input_after': '<CR>'},
\]

for rule in s:lexima_tex_rules
  let rule.filetype = 'tex'
  call lexima#add_rule(rule)
endfor
'''

[[plugins]]
repo = 'yasunori-kirin0418/lightline_skk.vim'
on_source = 'skkeleton'
hook_source = '''
call lightline_skk#option('display', {
\   'hiragana': 'あ',
\   'katakana': 'ア',
\   'hankaku-katakana': 'ｶﾅ',
\   'zenkaku-alphabet': '英',
\   'alphabet': '＠',
\ })
'''

# [[plugins]]
# repo = 'vim-pandoc/vim-pandoc'
# on_ft = ['markdown']

[[plugins]]
repo = '~/GitHub/procon.vim'
on_ft = 'cpp'

### jupyter
[[plugins]]
repo = 'goerz/jupytext.vim'
on_path = '.*\.ipynb'
hook_add = '''
let g:jupytext_fmt = 'py:percent'
let g:jupytext_filetype_map = {'py': 'python'}
'''

[[plugins]]
repo = 'jpalardy/vim-slime'
on_source = 'jupytext.vim'
hook_add = '''
let g:slime_target = 'vimterminal'
let g:slime_vimterminal_cmd = 'ipython3'
let g:slime_vimterminal_config = {'term_finish': 'close'}

let g:slime_python_ipython = 1
let g:slime_cell_delimiter = "# %%"
let g:slime_dont_ask_default = 1
'''

[[plugins]]
repo = 'hanschen/vim-ipython-cell'
on_source = 'jupytext.vim'
