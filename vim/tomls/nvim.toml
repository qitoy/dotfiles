[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'
lua_add = '''
vim.notify = function(...)
  vim.notify = require'notify'
  vim.notify.setup {
    background_colour = '#000000'
  }
  vim.notify(...)
end
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufRead', 'CursorHold']
hook_post_update = 'TSUpdate'
lua_source = '''
local parser_config = require "nvim-treesitter.parsers".get_parser_configs()
parser_config.satysfi = {
  install_info = {
    url = "https://github.com/monaqa/tree-sitter-satysfi", -- local path or git repo
    files = {"src/parser.c", "src/scanner.c"}
  },
  filetype = "satysfi", -- if filetype does not agrees with parser name
}

require'nvim-treesitter.configs'.setup {
    ensure_installed = 'all',
    highlight = {
        enable = true,
        additional_vim_regex_highlighting = false,
    },
    yati = {
        enable = true,
        default_lazy = true,
        default_fallback = "auto",
    },
    matchup = {
      enable = true,
      },
    indent = {
        enable = false
    }
}
'''

[[plugins]]
repo = 'yioneko/nvim-yati'
depends = 'nvim-treesitter'

[[plugins]]
repo = 'nvim-treesitter/playground'
on_cmd = ['TSPlaygroundToggle', 'TSHighlightCapturesUnderCursor']

[[plugins]]
repo = 'uga-rosa/ddc-nvim-lsp-setup'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = 'ddc-nvim-lsp-setup'
on_event = ['BufRead', 'CursorHold']
lua_source = '''
require'ddc_nvim_lsp_setup'.setup()
local lspconfig = require'lspconfig'
vim.api.nvim_create_autocmd('LspAttach', {
    group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    callback = function(ev)
        local bufopts = { noremap = true, silent = true, buffer = ev.buf }
        vim.keymap.set("n", "K", vim.lsp.buf.hover, bufopts)
        vim.keymap.set("n", "<Plug>(leader)e", vim.diagnostic.open_float, bufopts)
        vim.keymap.set("n", "<Plug>(leader)f", vim.lsp.buf.format, bufopts)
        vim.keymap.set("n", "<Plug>(leader)rn", vim.lsp.buf.rename, bufopts)
    end
})
lspconfig.clangd.setup{}
lspconfig.denols.setup{}
lspconfig.taplo.setup{}
lspconfig.texlab.setup{}
lspconfig.vimls.setup{}
lspconfig.rust_analyzer.setup{
  settings = {
    ['rust-analyzer'] = {
      check = {
        command = 'clippy'
      },
      server = {
        extraEnv = {
          RUSTUP_TOOLCHAIN = '1.70.0'
        }
      }
    }
  },
 }
local configs = require 'lspconfig.configs'
if not configs.satysfi_ls then
    configs.satysfi_ls = {
        default_config = {
            cmd = { 'satysfi-language-server' },
            filetypes = { 'satysfi' },
            root_dir = lspconfig.util.root_pattern('.git'),
            settings = {},
        },
    }
end
lspconfig.satysfi_ls.setup{}
lspconfig.efm.setup {
  filetypes = { 'satysfi' }
}
'''

[[plugins]]
repo = 'David-Kunz/treesitter-unit'
on_lua = 'treesitter-unit'
lua_add = '''
vim.api.nvim_set_keymap('x', 'iu', ':lua require"treesitter-unit".select()<CR>', {noremap=true})
vim.api.nvim_set_keymap('x', 'au', ':lua require"treesitter-unit".select(true)<CR>', {noremap=true})
vim.api.nvim_set_keymap('o', 'iu', ':<C-u>lua require"treesitter-unit".select()<CR>', {noremap=true})
vim.api.nvim_set_keymap('o', 'au', ':<C-u>lua require"treesitter-unit".select(true)<CR>', {noremap=true})
'''
