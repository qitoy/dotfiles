[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex']
hook_add = '''
if has('mac')
  let g:vimtex_view_method = 'skim'
  let g:vimtex_view_general_viewer='/Applications/Skim.app/Contents/SharedSupport/displayline'
  let g:vimtex_view_general_options = '@line @pdf @tex'
endif
if has('nvim')
  let g:vimtex_syntax_enabled = 0
  let g:vimtex_syntax_conceal_disable = 1
endif
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'
hook_add = 'set helplang=ja'

[[plugins]]
repo = 'segeljakt/vim-silicon'
on_cmd = 'Silicon'
hook_add = '''
let g:silicon = {
\ 'theme': 'Solarized (dark)',
\ 'font': 'UDEV Gothic 35LG',
\ 'output': '~/Documents/silicon-{time:%Y-%m-%d-%H%M%S}.png',
\}
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = ['<Plug>(expand_region']
hook_add = '''
xnoremap v <Plug>(expand_region_expand)
xnoremap V <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = ['<Plug>(asterisk-']
hook_add = '''
noremap * <Plug>(asterisk-z*)
noremap # <Plug>(asterisk-z#)
noremap g* <Plug>(asterisk-gz*)
noremap g# <Plug>(asterisk-gz#)
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'

[[plugins]]
repo = 'itchyny/vim-qfedit'
on_event = 'QuickFixCmdPre'

[[plugins]]
repo = 'lambdalisue/vim-quickrun-neovim-job'

[[plugins]]
repo = 'statiolake/vim-quickrun-runner-nvimterm'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
depends = ['vim-quickrun-neovim-job', 'vim-quickrun-runner-nvimterm']
hook_add = '''
let g:quickrun_config = {
\ '_': {
\   'runner': 'neovim_job',
\ },
\}
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
hooks_file = '$VIM_HOOKS/deol.vim'

# {{{ denops
[[plugins]]
repo = 'skanehira/denops-translate.vim'
on_cmd = 'Translate'

[[plugins]]
repo = 'lambdalisue/gin.vim'
on_cmd = [
  'Gin',
  'GinBranch',
  'GinBrowse',
  'GinBuffer',
  'GinCd',
  'GinChaperon',
  'GinDiff',
  'GinEdit',
  'GinLcd',
  'GinLog',
  'GinPatch',
  'GinStatus',
  'GinTcd',
]
hook_add = '''
nnoremap gs <Cmd>GinStatus<CR>
'''

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
on_cmd = 'FuzzyMotion'
hook_add = '''
nnoremap ss <Cmd>FuzzyMotion<CR>
let g:fuzzy_motion_matchers = ['fzf', 'kensaku']
'''

[[plugins]]
repo = 'gamoutatsumi/dps-ghosttext.vim'

[[plugins]]
repo = 'qitoy/dps-procon.vim'
hook_add = '''
autocmd vimrc User DenopsPluginPost:procon call procon#modules('$VIM_HOOKS/procon.ts'->expand())
'''

[[plugins]]
repo = 'lambdalisue/kensaku.vim'

[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = { ict = ['<Plug>(skkeleton-'] }
hooks_file = '$VIM_HOOKS/skkeleton.vim'

[[plugins]]
repo = 'NI57721/skkeleton-state-popup'
on_source = 'skkeleton'
hook_source = '''
call skkeleton_state_popup#config(#{
\ labels: {
\   'input': #{hira: "あ", kata: 'ア', hankata: 'ｶﾅ', zenkaku: 'Ａ'},
\   'input:okurinasi': #{hira: '▽▽', kata: '▽▽', hankata: '▽▽', abbrev: 'ab'},
\   'input:okuriari': #{hira: '▽▽', kata: '▽▽', hankata: '▽▽'},
\   'henkan': #{hira: '▼▼', kata: '▼▼', hankata: '▼▼', abbrev: 'ab'},
\   'latin': '',
\ },
\ opts: #{relative: 'cursor', col: 0, row: 1, anchor: 'NW', style: 'minimal'},
\})
call skkeleton_state_popup#run()
'''

# }}}

[[plugins]]
repo = 'vim-pandoc/vim-pandoc'
on_ft = ['markdown']
on_cmd = 'Pandoc'
hook_add = '''
let g:pandoc#filetypes#handled = ["pandoc", "markdown"]
let g:pandoc#filetypes#pandoc_markdown = 0
let g:pandoc#spell#enabled = 0
let g:pandoc#command#autoexec_on_writes = 0
'''

[[plugins]]
repo = 'vim-pandoc/vim-pandoc-syntax'
on_source = ['vim-pandoc']

[[plugins]]
repo = 'qitoy/sssv'
on_cmd = 'SSSV'
