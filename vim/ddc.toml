[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'pum.vim', 'context_filetype.vim']
on_event = ['InsertEnter', 'CursorHold', 'CmdlineEnter']
hook_source = '''
call ddc#custom#patch_global('sources', [
\  has('nvim') ? 'nvim-lsp' : 'vim-lsp',
\  'around',
\  'ultisnips',
\])

call ddc#custom#patch_global('cmdlineSources',
\  ['cmdline', 'cmdline-history', 'around'])

call ddc#custom#patch_global('sourceOptions', #{
\  _: #{
\    ignoreCase: v:true,
\    matchers: ['matcher_fuzzy'],
\    sorters: ['sorter_fuzzy'],
\    converters: ['converter_fuzzy'],
\  },
\  vim-lsp: #{
\    mark: '| LSP',
\    forceCompletionPattern: '(\.|:|->|"\w+/*).?',
\  },
\  nvim-lsp: #{
\    mark: '| LSP',
\    forceCompletionPattern: '(\.|:|->|"\w+/*).?',
\  },
\  ultisnips: #{ mark: '| US' },
\  around: #{ mark: '| A' },
\  necovim: #{ mark: '| vim' },
\  nvim-lua: #{ mark: '| lua' },
\  mocword: #{
\    mark: '| mocword',
\    minAutoCompleteLength: 3,
\    isVolatile: v:true,
\  },
\  cmdline: #{
\    ignoreCase: v:false,
\    mark: '| cmd',
\    forceCompletionPattern: '\S/\S*',
\  },
\  cmdline-history: #{
\    mark: '| history',
\  },
\})

call ddc#custom#patch_global('filterParams', #{
\  converter_fuzzy: #{
\    hlGroup: 'CursorLine'
\  },
\})

call ddc#custom#patch_filetype(
\ ['vim'], 'sources', [
\  'necovim',
\  'around',
\  'ultisnips',
\ ])

call ddc#custom#patch_filetype(
\ ['lua'], 'sources', [
\  'nvim-lua',
\  'around',
\  'ultisnips',
\ ])

call ddc#custom#patch_filetype(
\ ['markdown'], 'sources', [
\ 'mocword',
\ 'around',
\ ])

" Use pum.vim
call ddc#custom#patch_global('ui', 'pum')

inoremap <silent><expr> <TAB>
\ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-Y> <Cmd>call pum#map#confirm()<CR>

" Use cmdline ddc
call ddc#custom#patch_global('autoCompleteEvents', [
\  'InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged',
\])

" Use ddc.
call ddc#enable()
'''
hook_add = '''
nnoremap : <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  " Note: It disables default command line completion!
  cnoremap <expr> <Tab>
  \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
  \ ddc#map#manual_complete()
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>

  " Overwrite sources
  if !exists('b:prev_buffer_config')
    let b:prev_buffer_config = ddc#custom#get_buffer()
  endif

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()
  autocmd InsertEnter <buffer> ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
endfunction
function! CommandlinePost() abort
  silent! cunmap <Tab>
  silent! cunmap <S-Tab>

  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif
endfunction
'''

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
depends = 'pum.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
depends = 'denops.vim'
on_source = 'ddc.vim'
hook_source = '''
call signature_help#enable()
let g:lsp_signature_help_enabled = 0
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
depends = 'denops.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-source-mocword'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lua'
on_source = 'ddc.vim'

[[plugins]]
repo = 'SirVer/ultisnips'
on_source = 'ddc.vim'
hook_add = '''
let g:UltiSnipsEditSplit = 'horizontal'
let g:UltiSnipsExpandTrigger = '<C-l>'
let g:UltiSnipsJumpForwardTrigger = '<C-l>'
let g:UltiSnipsJumpBackwardTrigger = '<C-p>'
'''

[[plugins]]
repo = 'matsui54/ddc-ultisnips'
on_source = 'ddc.vim'
depends = ['ddc.vim', 'ultisnips']

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'vim-skk/skkeleton'
depends = 'denops.vim'
on_event = 'InsertEnter'
hook_add = '''
imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
function s:skkeleton_init() abort
  call skkeleton#register_kanatable('gact10', g:vimrc#gACT10, v:true)
  call skkeleton#config(#{
  \ eggLikeNewline: v:true,
  \ globalDictionaries: [['/usr/share/skk/SKK-JISYO.L', 'euc-jp']],
  \ userJisyo: "~/.skkeleton",
  \ selectCandidateKeys: 'aoeuhtn',
  \ kanaTable: 'gact10',
  \})
endfunction
augroup skkeleton-initialize-pre
  autocmd!
  autocmd User skkeleton-initialize-pre call s:skkeleton_init()
augroup END
'''

# Install your filters
[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'
