[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'
lua_add = '''
vim.notify = function(...)
  vim.notify = require'notify'
  vim.notify(...)
end
'''
lua_source = '''
require'notify'.setup {
  background_colour = 'NotifyBackground',
  render = 'minimal',
  timeout = 1000,
}
'''

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'folke/noice.nvim'
on_event = ['CursorHold']
depends = ['nui.nvim', 'nvim-notify', 'nvim-treesitter']
lua_source = '''
require'noice'.setup {
  lsp = {
    -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
    override = {
      ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
      ["vim.lsp.util.stylize_markdown"] = true,
      -- ["cmp.entry.get_documentation"] = true, -- requires hrsh7th/nvim-cmp
    },
  },
  routes = {
    {
      view = "cmdline",
      filter = { event = "msg_showmode" },
      opts = {
        position = { col = "100%" },
        size = { width = "auto" },
      },
    },
  },
  -- you can enable a preset for easier configuration
  presets = {
    bottom_search = true, -- use a classic bottom cmdline for search
    command_palette = true, -- position the cmdline and popupmenu together
    long_message_to_split = true, -- long messages will be sent to a split
    inc_rename = false, -- enables an input dialog for inc-rename.nvim
    lsp_doc_border = false, -- add a border to hover docs and signature help
  },
}
'''

# {{{ treesitter
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufRead', 'CursorHold']
hook_post_update = 'TSUpdate'
lua_source = '''
local parser_config = require "nvim-treesitter.parsers".get_parser_configs()
parser_config.satysfi = {
  install_info = {
    url = "https://github.com/monaqa/tree-sitter-satysfi", -- local path or git repo
    files = {"src/parser.c", "src/scanner.c"}
  },
  filetype = "satysfi", -- if filetype does not agrees with parser name
}

vim.treesitter.language.register("markdown", "mdx")

require'nvim-treesitter.configs'.setup {
  ensure_installed = 'all',
  highlight = {
    enable = true,
    additional_vim_regex_highlighting = false,
  },
  yati = {
    enable = true,
    default_lazy = true,
    default_fallback = "auto",
  },
  matchup = {
    enable = true,
  },
  indent = {
    enable = false
  }
}
'''

[[plugins]]
repo = 'yioneko/nvim-yati'
on_source = 'nvim-treesitter'
# }}}

# {{{ lsp
[[plugins]]
repo = 'uga-rosa/ddc-source-lsp-setup'
depends = 'ddc-source-lsp'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = 'ddc-source-lsp-setup'
on_event = ['BufRead', 'CursorHold']
lua_source = '''
require'ddc_source_lsp_setup'.setup()
local lspconfig = require'lspconfig'
vim.api.nvim_create_autocmd('LspAttach', {
    group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    callback = function(ev)
        local bufopts = { noremap = true, silent = true, buffer = ev.buf }
        vim.keymap.set("n", "K", vim.lsp.buf.hover, bufopts)
        vim.keymap.set("n", "<Plug>(leader)e", vim.diagnostic.open_float, bufopts)
        vim.keymap.set("n", "<Plug>(leader)f", vim.lsp.buf.format, bufopts)
        vim.keymap.set("n", "<Plug>(leader)rn", vim.lsp.buf.rename, bufopts)
    end
})
lspconfig.clangd.setup{}
lspconfig.denols.setup{}
lspconfig.nixd.setup{
  settings = {
    nixd = {
      formatting = {
        command = { "nixpkgs-fmt" },
      }
    }
  }
}
-- lspconfig.taplo.setup{}
lspconfig.texlab.setup{}
lspconfig.vimls.setup{}
lspconfig.pylsp.setup{}
lspconfig.rust_analyzer.setup{
  settings = {
    ['rust-analyzer'] = {
      check = {
        command = 'clippy'
      },
      server = {
        extraEnv = {
          RUSTUP_TOOLCHAIN = '1.70.0'
        }
      }
    }
  },
}
local configs = require 'lspconfig.configs'
if not configs.satysfi_ls then
    configs.satysfi_ls = {
        default_config = {
            cmd = { 'satysfi-language-server' },
            filetypes = { 'satysfi' },
            root_dir = lspconfig.util.root_pattern('.git'),
            single_file_support = true,
            settings = {},
        },
    }
end
lspconfig.satysfi_ls.setup{}
lspconfig.efm.setup {
  filetypes = { 'satysfi' }
}
'''
# }}}

[[plugins]]
repo = 'hrsh7th/nvim-insx'
on_event = ['InsertEnter', 'CursorHold']
lua_source = '''
require'insx.preset.standard'.setup()
'''

[[plugins]]
repo = 'tani/dmacro.nvim'
on_event = ['InsertEnter', 'CursorHold', 'BufRead']
lua_source = '''
require'dmacro'.setup { dmacro_key = '<C-@>' }
'''

[[plugins]]
repo = 'b0o/incline.nvim'
on_event = ['CursorHold', 'BufRead']
lua_source = '''
require'incline'.setup {}
'''
