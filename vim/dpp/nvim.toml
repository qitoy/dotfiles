[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = ['BufRead', 'CursorHold']
lua_source = '''
require"nvim-treesitter".setup {
  install_dir = vim.fn["dpp#get"]("nvim-treesitter").path,
}
vim.api.nvim_create_autocmd({ "FileType" }, {
  group = "vimrc",
  callback = function()
    if pcall(vim.treesitter.start) then
      vim.wo.foldexpr = "v:lua.vim.treesitter.foldexpr()"
      vim.bo.indentexpr = "v:lua.require'nvim-treesitter'.indentexpr()"
    end
  end,
})
'''

# {{{ lsp
[[plugins]]
repo = 'uga-rosa/ddc-source-lsp-setup'
depends = 'ddc-source-lsp'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = 'ddc-source-lsp-setup'
on_event = ['BufRead', 'CursorHold']
lua_source = '''
require'ddc_source_lsp_setup'.setup()
vim.api.nvim_create_autocmd('LspAttach', {
    group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    callback = function(ev)
        local bufopts = { noremap = true, silent = true, buffer = ev.buf }
        vim.keymap.set("n", "K", vim.lsp.buf.hover, bufopts)
        vim.keymap.set("n", "<Plug>(leader)e", vim.diagnostic.open_float, bufopts)
        vim.keymap.set("n", "<Plug>(leader)f", vim.lsp.buf.format, bufopts)
        vim.keymap.set("n", "<Plug>(leader)rn", vim.lsp.buf.rename, bufopts)
    end
})

vim.lsp.config('nixd', {
  settings = {
    nixd = {
      formatting = {
        command = { "nixfmt" },
      }
    }
  }
})

vim.lsp.config('rust_analyzer', {
  settings = {
    ['rust-analyzer'] = {
      check = {
        command = 'clippy'
      },
      server = {
        extraEnv = {
          RUSTUP_TOOLCHAIN = '1.70.0'
        }
      }
    }
  },
})

vim.lsp.config('satysfi_ls', {
  cmd = { 'satysfi-language-server' },
  filetypes = { 'satysfi' },
  root_markers = { '.git' },
  single_file_support = true,
})

vim.lsp.config('efm', {
  cmd = { 'efm-langserver' },
  filetypes = { 'satysfi' },
  root_markers = { '.git' },
  single_file_support = true,
})

vim.lsp.enable({
  "clangd",
  "denols",
  "efm",
  "nixd",
  "pylsp",
  "rust_analyzer",
  "satysfi_ls",
  "taplo",
  "texlab",
  "vimls",
})
'''
# }}}

[[plugins]]
repo = 'hrsh7th/nvim-insx'
on_event = ['InsertEnter', 'CursorHold']
lua_source = '''
require'insx.preset.standard'.setup()
'''

[[plugins]]
repo = 'b0o/incline.nvim'
on_event = ['CursorHold', 'BufRead']
lua_source = '''
require'incline'.setup {}
'''

[[plugins]]
repo = '4513ECHO/nvim-keycastr'
on_lua = 'keycastr'
lua_source = '''
require"keycastr".config.set {
  ignore_mouse = true,
  position = "SE",
  win_config = {
    border = "rounded",
  },
}
'''

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'MunifTanjim/nui.nvim'

[[plugins]]
repo = 'zbirenbaum/copilot.lua'
on_cmd = 'Copilot'
on_lua = 'copilot'
lua_source = '''
require"copilot".setup({
  suggestions = { enable = false },
  panels = { enable = false },
  server_opts_overrides = {
    trace = 'verbose',
    cmd = {
      vim.fn.exepath('copilot-language-server'),
      '--stdio'
    },
  },
})
'''

[[plugins]]
repo = 'CopilotC-Nvim/CopilotChat.nvim'
depends = ['copilot.lua', 'plenary.nvim']
on_cmd = ['CopilotChat']
lua_source = '''
require"CopilotChat".setup{}
'''

[[plugins]]
repo = 'yetone/avante.nvim'
depends = ['copilot.lua', 'plenary.nvim', 'nui.nvim']
on_cmd = ['AvanteAsk', 'AvanteChat', 'AvanteChatNew']
lua_source = '''
require"avante_lib".load()
require"avante".setup {
  provider = "copilot",
}
'''
