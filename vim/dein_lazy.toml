# Let dein manage dein
# Required:
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'

[[plugins]]
repo = 'lervag/vimtex'
on_ft=['tex']
hook_add='''
if has('mac')
  let g:vimtex_view_method = 'skim'
  let g:vimtex_view_general_viewer='/Applications/Skim.app/Contents/SharedSupport/displayline'
  let g:vimtex_view_general_options = '@line @pdf @tex'
endif
if has('nvim')
  let g:vimtex_syntax_enabled = 0
  let g:vimtex_syntax_conceal_disable = 1
endif
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft='help'
hook_add = 'set helplang=ja'

[[plugins]]
repo = 'segeljakt/vim-silicon'
on_cmd = 'Silicon'
hook_add = '''
let g:silicon = {
\ 'theme': 'Solarized (dark)',
\ 'font': 'UDEV Gothic 35LG',
\ 'output': '~/Documents/silicon-{time:%Y-%m-%d-%H%M%S}.png',
\}
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = '<Plug>(expand_region'
hook_add = '''
xnoremap v <Plug>(expand_region_expand)
xnoremap V <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>(asterisk-'
hook_add = '''
noremap * <Plug>(asterisk-z*)
noremap # <Plug>(asterisk-z#)
noremap g* <Plug>(asterisk-gz*)
noremap g# <Plug>(asterisk-gz#)
'''

# {{{ quickfix
[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'

[[plugins]]
repo = 'itchyny/vim-qfedit'
on_event = 'QuickFixCmdPre'
# }}}

# {{{ QuickRun
[[plugins]]
repo = 'lambdalisue/vim-quickrun-neovim-job'

[[plugins]]
repo = 'statiolake/vim-quickrun-runner-nvimterm'

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
depends = ['vim-quickrun-neovim-job', 'vim-quickrun-runner-nvimterm']
hook_add = '''
let g:quickrun_config = {
\ '_': {
\   'runner': has('nvim') ? 'neovim_job' : 'job',
\ },
\}
'''
# }}}

# {{{ context_filetype
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
if = '!has("nvim")'
hook_add = '''
let g:precious_enable_switchers = #{
\ toml: #{ setfiletype: 0 },
\}
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_add = '''
let g:context_filetype#filetypes = #{
\ help: [
\   #{
\     start: '>$',
\     end: '^\S',
\     filetype: 'vim.help',
\   },
\ ],
\ tex: [
\   #{
\     start: '\\begin{luacode\*}',
\     end: '\\end{luacode\*}',
\     filetype: 'lua',
\   },
\ ],
\}
'''

[[plugins]]
repo = 'thinca/vim-partedit'
depends = 'context_filetype.vim'
hook_add = '''
function! s:operator_partedit() abort
  let context = context_filetype#get()
  if context.range == [[0, 0], [0, 0]]
    echohl WarningMsg
    echomsg 'Context is not found'
    echohl NONE
    return
  endif
  call partedit#start(context.range[0][0], context.range[1][0],
        \ #{ filetype: context.filetype})
  nnoremap <buffer> q <Cmd>parteditEnd<CR>
endfunction
nnoremap <Plug>(leader)p <Cmd>call <SID>operator_partedit()<CR>
'''
# }}}

# {{{ denops
[[plugins]]
repo = 'skanehira/denops-translate.vim'
on_cmd = 'Translate'

[[plugins]]
repo = 'lambdalisue/gin.vim'
depends = 'denops.vim'
on_cmd = ['Gin', 'GinBranch', 'GinChaperon', 'GinDiff', 'GinEdit', 'GinPatch', 'GinStatus']
hook_add = '''
nnoremap gs <Cmd>GinStatus<CR>
'''

[[plugins]]
repo = 'skanehira/denops-gh.vim'
depends = 'denops.vim'
on_path = ['https://github.com/*', 'gh://*']

[[plugins]]
repo = 'yuki-yano/fuzzy-motion.vim'
depends = 'denops.vim'
on_cmd = 'FuzzyMotion'
hook_add = '''
nnoremap <Plug>(leader)/ <Cmd>FuzzyMotion<CR>
'''

[[plugins]]
repo = 'gamoutatsumi/dps-ghosttext.vim'
depends = 'denops.vim'
on_cmd = 'GhostStart'

[[plugins]]
repo = 'qitoy/dps-procon.vim'
on_cmd = ['ProconTest', 'ProconSubmit', 'ProconDownload']
depends = 'denops.vim'

[[plugins]]
repo = '~/GitHub/dps-camp.vim'
depends = 'denops.vim'
on_cmd = ['CampTest', 'CampSubmit', 'CampOpen']

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = ['Deol', 'DeolCd', 'DeolEdit']
hook_source = '''
let g:deol#shell_history_path = '~/.zsh-history'

tnoremap <expr> <Tab> pum#visible() ?
\ '<Cmd>call pum#map#insert_relative(+1)<CR>' : '<Tab>'
tnoremap <expr> <S-Tab> pum#visible() ?
\ '<Cmd>call pum#map#insert_relative(-1)<CR>' : '<S-Tab>'
'''
# }}}

# {{{ lexima
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['InsertEnter']
# rev = 'feature/feedkeys'
hook_source = '''
call lexima#add_rule(#{
\ char: '<CR>',
\ input: '<CR>',
\ input_after: '<CR>endsnippet',
\ at: 'snippet\>.*\%#$',
\ filetype: 'snippets',
\})

let s:lexima_cpp_rules = [
\ ]

for rule in s:lexima_cpp_rules
  let rule.filetype = 'cpp'
  call lexima#add_rule(rule)
endfor

let s:lexima_tex_rules = [
\ #{ char: '[',    at: '\\\%#',                    input: '[<CR>',        input_after: '<CR>\]'                        },
\
\ #{ char: '{',    at: '\\\%#',                                           input_after: '\}'                            },
\ #{ char: '<BS>', at: '\\{\%#\\}',                input: '<BS><BS>',                              delete: 2           },
\
\ #{ char: '(',    at: '\\left\%#',                                       input_after: '\right)'                       },
\ #{ char: ')',    at: '\%#\\right)',                                                                         leave: 7 },
\ #{ char: '[',    at: '\\left\%#',                                       input_after: '\right]'                       },
\ #{ char: ']',    at: '\%#\\right]',                                                                         leave: 7 },
\ #{ char: '{',    at: '\\left\\\%#',                                     input_after: '\right\}'                      },
\ #{ char: '}',    at: '\\\%#\\right\\}',          input: '<BS>\right\}',                          delete: 8           },
\
\ #{ char: '$',                                                           input_after: '$'                             },
\ #{ char: '$',    at: '\\\%#'},
\ #{ char: '$',    at: '\%#\$',                                                                               leave: 1 },
\ #{ char: '<BS>', at: '\$\%#\$',                                                                  delete: 1           },
\ #{ char: '<CR>', at: '\$\%#\$',                                         input_after: '<CR>'                          },
\]

for rule in s:lexima_tex_rules
  let rule.filetype = 'tex'
  call lexima#add_rule(rule)
endfor

inoremap <expr> <C-l> UltiSnips#CanExpandSnippet() <Bar><Bar> UltiSnips#CanJumpForwards() ?
\ '<Cmd>call UltiSnips#ExpandSnippetOrJump()<CR>' : lexima#expand('<LT>C-L>', 'i')
'''
# }}}

# {{{ pandoc
[[plugins]]
repo = 'vim-pandoc/vim-pandoc'
on_ft = ['markdown']
on_cmd = 'Pandoc'
hook_add = '''
let g:pandoc#filetypes#handled = ["pandoc", "markdown"]
let g:pandoc#filetypes#pandoc_markdown = 0
let g:pandoc#spell#enabled = 0
let g:pandoc#command#autoexec_on_writes = 0
'''

[[plugins]]
repo = 'vim-pandoc/vim-pandoc-syntax'
on_source = ['vim-pandoc']
# }}}

[[plugins]]
repo = 'qitoy/sssv'
on_cmd = 'SSSV'
